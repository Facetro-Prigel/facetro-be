generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  uuid             String      @id @default(uuid())
  name             String
  identity_number  String      @unique
  password         String
  email            String      @unique
  avatar           String?
  bbox             Json?
  signature        String?     @db.Text 
  telegram_id      BigInt?
  telegram_token   String?
  nfc_data         String?     
  groups           Group[]
  user_group       UserGroup[]
  log              Log[]
  role_user        RoleUser[]
  permission_user  PermissionUser[]
  user_details     UserDetails?
  created_at     DateTime @default(now())
  modified_at    DateTime @updatedAt
}

model UserDetails {
  uuid           String   @id @default(uuid())
  user_uuid      String   @unique
  phone_number   String?
  batch          Int?
  birthday       DateTime?
  program_study  String?
  user           User     @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
}

model Group {
  uuid             String     @id @default(uuid())
  name             String     @unique
  parent_group_uuid String?
  locations        String
  notify_to        String
  users            User       @relation(fields: [notify_to], references: [uuid], onDelete: NoAction, onUpdate: Cascade)
  user_group       UserGroup[]
  door_group       DoorGroup[]
  presence_group   PresenceGroup[]
}

model DoorGroup {
  uuid        String   @id @default(uuid())
  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt
  device_uuid String
  group_uuid  String
  device      Device   @relation(fields: [device_uuid], references: [uuid], onDelete: Cascade)
  group       Group    @relation(fields: [group_uuid], references: [uuid], onDelete: Cascade)
}

model PresenceGroup {
  uuid        String   @id @default(uuid())
  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt
  device_uuid String
  group_uuid  String
  device      Device   @relation(fields: [device_uuid], references: [uuid], onDelete: Cascade)
  group       Group    @relation(fields: [group_uuid], references: [uuid], onDelete: Cascade)
}

model Device {
  uuid              String  @id @default(uuid())
  name              String
  locations         String  @unique
  ip_address        String?
  token             String? @unique
  identity          String
  log               Log[]
  door_group        DoorGroup[]
  presence_group    PresenceGroup[]
}

model TempData {
  uuid        String   @id @default(uuid())
  created_at  DateTime @default(now())
  data        Json
}

model UserGroup {
  uuid        String   @id @default(uuid())
  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt
  user_uuid   String
  group_uuid  String
  user        User     @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  group       Group    @relation(fields: [group_uuid], references: [uuid], onDelete: Cascade)
}

model Log {
  uuid        String   @id @default(uuid())
  type        absen
  image_path  String
  bbox        Json
  signature   String
  created_at  DateTime @default(now())
  user_uuid   String
  is_match    Boolean  @default(false)
  device_uuid String
  user        User     @relation(fields: [user_uuid], references: [uuid], onDelete: NoAction)
  device      Device   @relation(fields: [device_uuid], references: [uuid], onDelete: NoAction)
  other_data  Json?
}

enum absen {
  Login
  Logout
  Door
}

model Role {
  uuid             String           @id @default(uuid())
  name             String
  guard_name       String           @unique
  description      String?
  created_at       DateTime         @default(now())
  modified_at      DateTime         @updatedAt
  role_user        RoleUser[]
  permission_role  PermissionRole[]
}

model RoleUser {
  uuid        String   @id @default(uuid())
  user_uuid   String
  role_uuid   String
  created_at  DateTime @default(now())
  modified_at DateTime @updatedAt
  user        User     @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  role        Role     @relation(fields: [role_uuid], references: [uuid], onDelete: Cascade)
}

model Permission {
  uuid             String           @id @default(uuid())
  name             String
  guard_name       String           @unique
  description      String?
  created_at       DateTime         @default(now())
  modified_at      DateTime         @updatedAt
  permission_role  PermissionRole[]
  permission_user  PermissionUser[]
}

model PermissionRole {
  uuid           String   @id @default(uuid())
  created_at     DateTime @default(now())
  modified_at    DateTime @updatedAt
  permission_uuid String
  role_uuid      String
  permission     Permission @relation(fields: [permission_uuid], references: [uuid], onDelete: Cascade)
  role          Role       @relation(fields: [role_uuid], references: [uuid], onDelete: Cascade)
}

model PermissionUser {
  uuid           String   @id @default(uuid())
  created_at     DateTime @default(now())
  modified_at    DateTime @updatedAt
  user_uuid      String
  permission_uuid String
  user           User      @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  permission     Permission @relation(fields: [permission_uuid], references: [uuid], onDelete: Cascade)
}
